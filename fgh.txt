// MyForm.jsx
import React from 'react';
import { useForm } from 'react-hook-form';
import * as yup from 'yup';

const schema = yup.object().shape({
  name: yup.string().required('Name is required'),
  email: yup.string().email('Invalid email').required('Email is required'),
  password: yup.string().min(6, 'Password must be at least 6 characters').required('Password is required'),
});

function MyForm() {
  const { register, handleSubmit, errors } = useForm({
    resolver: yupResolver(schema),
  });

  const onSubmit = (data) => {
    console.log('Form data:', data);
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <input type="text" name="name" ref={register} placeholder="Name" />
      {errors.name && <p>{errors.name.message}</p>}

      <input type="email" name="email" ref={register} placeholder="Email" />
      {errors.email && <p>{errors.email.message}</p>}

      <input type="password" name="password" ref={register} placeholder="Password" />
      {errors.password && <p>{errors.password.message}</p>}

      <button type="submit">Submit</button>
    </form>
  );
}

export default MyForm;











































import React from 'react';
import { useForm } from 'react-hook-form';

export default function MyForm() {
  const { register, handleSubmit, formState: { errors }, reset } = useForm();

  const onSubmit = (data) => {
    // Handle form submission here (e.g., send data to server)
    console.log(data);
    // Show a success alert (you can use a library like react-toastify)
    alert('Form submitted successfully!');
    // Reset the form
    reset();
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="max-w-md mx-auto">
      <div className="mb-4">
        <label htmlFor="firstName">First Name</label>
        <input
          type="text"
          id="firstName"
          {...register('firstName', { required: true })}
          className="border p-2 w-full"
        />
        {errors.firstName && <p className="text-red-500">First Name is required</p>}
      </div>
      <div className="mb-4">
        <label htmlFor="lastName">First Name</label>
        <input
          type="text"
          id="firstName"
          {...register('firstName', { required: true })}
          className="border p-2 w-full"
        />
        {errors.firstName && <p className="text-red-500">First Name is required</p>}
      </div>

    

      <div className="mb-4">
        <label>Gender</label>
        <div>
          <input
            type="radio"
            value="male"
            {...register('gender')}
          />
          Male
          <input
            type="radio"
            value="female"
            {...register('gender')}
          />
          Female
        </div>
      </div>

      <div className="mb-4">
        <input
          type="checkbox"
          {...register('terms', { required: true })}
        />
        <label htmlFor="terms" className="ml-2">I agree to the terms and conditions</label>
        {errors.terms && <p className="text-red-500">You must accept the terms</p>}
      </div>

      <button type="submit" className="bg-blue-500 text-white px-4 py-2 rounded">
        Submit
      </button>
    </form>
  );
}
